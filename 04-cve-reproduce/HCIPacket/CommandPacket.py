from Packet import Packet, PacketType
import struct


class CommandPacket(Packet):

    def __init__(self, param, ocf=None, ogf=None, opcode=None) -> None:
        if ocf is not None and ogf is not None:
            _opcode = ((ogf << 10) | ocf)
        elif opcode is not None:
            _opcode = opcode
        else:
            raise ValueError(
                'CommandPacket should be initialized using both ocf and ogf, or opcode'
            )

        super().__init__(PacketType.COMMAND,
                         struct.pack("<HB", _opcode, len(param)) + param)

    @property
    def ocf(self):
        return (self.opcode & 0x3FF)

    @property
    def ogf(self):
        return (self.opcode >> 10)

    @property
    def opcode(self):
        return struct.unpack("<H", self.data[0:2])[0]

    @property
    def param(self):
        return self.data[3:]

    @property
    def param_len(self):
        return self.data[2]